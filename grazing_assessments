#Code written by Cynthia L. Norton, University of Arizona, 2021 
#The code was used to classify NEON scenes for species specific woody vegetation using LiDAR and Hyperspectral data.
#Script written by Cynthia Norton
#load the raster and rgdal libraries library
library(patchwork)
library(ggbreak)
library(ggplot2)
library(ggridges)
library(ggdist)
library(dplyr)
library(exactextractr)
library(sf)
library(tidyr)
library(terra)
library(tibble)
library(reshape2)
library(ggplot2)
library(ExtractTrainData)
library(tidyverse)
library(lidR)
library(doParallel)
library(foreach)
library(broom)
library(dplyr)
library(purrr)
library(ggplot2)
library(hrbrthemes)
library(dplyr)
library(tidyr)
library(viridis)
library(gridExtra)
library(BSDA)
library("ForestTools")
#install.packages('BSDA')
####DESNITY####
setwd("//gaea/projects/RaBET/RaBET_landuse/landuse/")
options(scipen = 100, digits = 4)



###SRER Percent Cover###
srer_cover <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/srer_landuse_freq_082624.csv') %>% dplyr::select(-freq_NaN)%>% na.omit() 
srer_mesquite <- srer_cover %>% dplyr::select(-c(cactus,creosote,paloverde,lotebush,bareground,grass)) %>% rename(cover = mesquite) %>% mutate(species="mesquite")%>% na.omit()
srer_cactus <- srer_cover %>% dplyr::select(-c(mesquite,creosote,paloverde,lotebush,bareground,grass))%>% rename(cover= cactus) %>% mutate(species="cactus")%>% na.omit()
srer_creosote <- srer_cover %>% dplyr::select(-c(cactus,mesquite,paloverde,lotebush,bareground,grass))%>% rename(cover= creosote) %>% mutate(species="creosote")%>% na.omit()
srer_lotebush <- srer_cover %>% dplyr::select(-c(cactus,creosote,mesquite, paloverde,bareground,grass))%>% rename(cover= lotebush) %>% mutate(species="lotebush")%>% na.omit()
srer_paloverde <- srer_cover %>% dplyr::select(-c(cactus,creosote,mesquite,lotebush,bareground,grass))%>% rename(cover= paloverde) %>% mutate(species="paloverde")%>% na.omit()
srer_bareground <- srer_cover %>% dplyr::select(-c(cactus,creosote,mesquite,paloverde,lotebush,grass))%>% rename(cover= bareground) %>% mutate(species="bareground")%>% na.omit()
srer_grass <- srer_cover %>% dplyr::select(-c(cactus,creosote,mesquite,lotebush, paloverde,bareground))%>% rename(cover= grass) %>% mutate(species="grass")%>% na.omit()

srer_cover_rbind <- rbind(srer_mesquite,srer_cactus) %>% 
  rbind(srer_creosote) %>% 
  rbind(srer_lotebush) %>%
  rbind(srer_paloverde)%>% mutate(grazing = as.numeric(ifelse(AUY_per_ha >= 300, '1','0')))%>%
  dplyr::filter(case_when(layer==1 ~ MUSYM == "EbC",
                          layer==2 ~ MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB",
                          layer==3 ~ MUSYM == "An" |MUSYM == "SoB",
                          layer==4 ~ MUSYM == "CtB" |MUSYM == "CuC"))

srer_cover_rbind_bg<-rbind(srer_bareground,srer_grass)%>%
  na.omit()%>%mutate(grazing = as.numeric(ifelse(AUY_per_ha >= 300, '1','0')))%>%
  dplyr::filter(case_when(layer==1 ~ MUSYM == "EbC",
                          layer==2 ~ MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB",
                          layer==3 ~ MUSYM == "An" |MUSYM == "SoB",
                          layer==4 ~ MUSYM == "CtB" |MUSYM == "CuC"))

#write.csv(srer_cover_rbind, 'srer_cover_rbind_082724.csv')%>%




##DENSITY#
###SRER###
srer_density <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/densities_final_SRER_082724.csv')%>% mutate(grazing = as.numeric(ifelse(AUY_per_ha >= 300, '1','0')))%>%
dplyr::filter(case_when(layer==1 ~ MUSYM == "EbC",
                   layer==2 ~ MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB",
                   layer==3 ~ MUSYM == "An" |MUSYM == "SoB",
                   layer==4 ~ MUSYM == "CtB" |MUSYM == "CuC"))
#write.csv(srer_density, 'srer_density_082724.csv')

#srer_density_nograzing <- srer_density %>% filter(grazing == 0)
#srer_density_grazing <- srer_density %>% filter(grazing == 1)

#srer_density_nograzing_elev1 <- srer_density_nograzing %>% filter(layer == 1)
#srer_density_nograzing_elev2 <- srer_density_nograzing %>% filter(layer == 2)
#srer_density_nograzing_elev3 <- srer_density_nograzing %>% filter(layer == 3)
#srer_density_nograzing_elev4 <- srer_density_nograzing %>% filter(layer == 4)

#srer_density_grazing_elev1 <- srer_density_grazing %>% filter(layer == 1)
#srer_density_grazing_elev2 <- srer_density_grazing %>% filter(layer == 2)
#srer_density_grazing_elev3 <- srer_density_grazing %>% filter(layer == 3)
#srer_density_grazing_elev4 <- srer_density_grazing %>% filter(layer == 4)



#CROWN AREA#
##SRER##
srer_mesquite_crownArea <-read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/mesquite_crownArea_df_srer_082624.csv')%>% mutate(species = "mesquite")
srer_cactus_crownArea <-read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/cactus_crownArea_df_srer_082624.csv')%>% mutate(species = "cactus")
srer_creosote_crownArea <-read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/creosote_crownArea_df_srer_082624.csv')%>% mutate(species = "creosote")
srer_lotebush_crownArea <-read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/lotebush_crownArea_df_srer_082824.csv')%>% mutate(species = "lotebush")
srer_paloverde_crownArea <-read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/paloverde_crownArea_df_srer_082824.csv')%>% mutate(species = "paloverde")

srer_crownarea <- rbind(srer_mesquite_crownArea,srer_cactus_crownArea,srer_creosote_crownArea,srer_lotebush_crownArea,srer_paloverde_crownArea)%>% 
  mutate(grazing = as.numeric(ifelse(AUY_per_ha > 300, '1','0')))%>%
  filter(case_when(FID_elevat==0 ~ MUSYM == "EbC",
                   FID_elevat==1 ~ MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB",
                   FID_elevat==2 ~ MUSYM == "An" |MUSYM == "SoB",
                   FID_elevat==3 ~ MUSYM == "CtB" |MUSYM == "CuC"))
#write.csv(srer_crownarea,'//gaea/projects/RaBET/RaBET_landuse/landuse/srer_crownarea_082724.csv')
#srer_crownarea_nograzing <- srer_crownarea %>% filter(grazing == 1)
#srer_crownarea_grazing <- srer_crownarea %>% filter(grazing == 2)


#TABLES
summarize_cover <- function(data, group_vars) {
  summary_data <- data %>%
    group_by(across(all_of(group_vars))) %>%
    summarize(mean = mean(cover),
              sd = sd(cover),
              count = n(),
              se = sd / sqrt(count),
              upper_limit = mean + se,
              lower_limit = mean - se,
              .groups = "drop") %>%
    mutate(grouping = paste(group_vars, collapse = "_"))
}


summarize_cover_spp <- function(data, group_vars) {
  summary_data <- data %>%
    group_by(species,across(all_of(group_vars))) %>%
    summarize(mean = mean(cover),
              sd = sd(cover),
              count = n(),
              se = sd / sqrt(count),
              upper_limit = mean + se,
              lower_limit = mean - se,
              .groups = "drop") %>%
    group_by(across(all_of(group_vars)))%>% summarize(mean = sum(mean))%>%
    mutate(grouping = paste(group_vars, collapse = "_"))
}
# Combine crown summaries including both with and without grazing
cover_summary_all <- bind_rows(
  # Summaries without grazing
  summarize_cover(srer_cover_rbind, "species"),
  summarize_cover(srer_cover_rbind, c("species", "layer")),
  summarize_cover(srer_cover_rbind, c("MUSYM", "species", "layer")),
  
  # Summaries with grazing
  summarize_cover(srer_cover_rbind, c("species", "grazing")),
  summarize_cover(srer_cover_rbind, c("species", "layer", "grazing")),
  summarize_cover(srer_cover_rbind, c("MUSYM", "species", "layer", "grazing")),
  
  summarize_cover_spp(srer_cover_rbind, "layer"),
  summarize_cover_spp(srer_cover_rbind, c("MUSYM", "layer")), 
  summarize_cover_spp(srer_cover_rbind, c("layer", "grazing")),
  summarize_cover_spp(srer_cover_rbind, c("MUSYM", "layer", "grazing"))
)

# Write the summary to a CSV file
write.csv(cover_summary_all, 'cover_summary_all_combinations_with_grazing_082824.csv', row.names = FALSE)










summarize_density <- function(data, group_vars) {
  summary_data <- data %>%
    group_by(across(all_of(group_vars))) %>%
    summarize(mean = mean(density),
              sd = sd(density),
              count = n(),
              se = sd / sqrt(count),
              upper_limit = mean + se,
              lower_limit = mean - se,
              .groups = "drop") %>%
    mutate(grouping = paste(group_vars, collapse = "_"))
}


summarize_density_spp <- function(data, group_vars) {
  summary_data <- data %>%
    group_by(species,across(all_of(group_vars))) %>%
    summarize(mean = mean(density),
              sd = sd(density),
              count = n(),
              se = sd / sqrt(count),
              upper_limit = mean + se,
              lower_limit = mean - se,
              .groups = "drop") %>%
    group_by(across(all_of(group_vars)))%>% summarize(mean = sum(mean))%>%
    mutate(grouping = paste(group_vars, collapse = "_"))
}
# Combine crown summaries including both with and without grazing
density_summary_all <- bind_rows(
  # Summaries without grazing
  summarize_density(srer_density, "species"),
  summarize_density(srer_density, c("species", "layer")),
  summarize_density(srer_density, c("MUSYM", "species", "layer")),
  
  # Summaries with grazing
  summarize_density(srer_density, c("species", "grazing")),
  summarize_density(srer_density, c("species", "layer", "grazing")),
  summarize_density(srer_density, c("MUSYM", "species", "layer", "grazing")),
  
  summarize_density_spp(srer_density, "layer"),
  summarize_density_spp(srer_density, c("MUSYM", "layer")), 
  summarize_density_spp(srer_density, c("layer", "grazing")),
  summarize_density_spp(srer_density, c("MUSYM", "layer", "grazing"))
)









summarize_crown <- function(data, group_vars) {
  summary_data <- data %>%
    group_by(across(all_of(group_vars))) %>%
    summarize(mean = mean(crownArea),
              sd = sd(crownArea),
              count = n(),
              se = sd / sqrt(count),
              upper_limit = mean + se,
              lower_limit = mean - se,
              .groups = "drop") %>%
    mutate(grouping = paste(group_vars, collapse = "_"))
}


# Combine crown summaries including both with and without grazing
crown_summary_all <- bind_rows(
  # Summaries without grazing
  summarize_crown(srer_crownarea, "species"),
  summarize_crown(srer_crownarea, "layer"),
  summarize_crown(srer_crownarea, c("MUSYM", "layer")),
  summarize_crown(srer_crownarea, c("species", "layer")),
  summarize_crown(srer_crownarea, c("MUSYM", "species", "layer")),
  
  # Summaries with grazing
  summarize_crown(srer_crownarea, c("species", "grazing")),
  summarize_crown(srer_crownarea, c("layer", "grazing")),
  summarize_crown(srer_crownarea, c("MUSYM", "layer", "grazing")),
  summarize_crown(srer_crownarea, c("species", "layer", "grazing")),
  summarize_crown(srer_crownarea, c("MUSYM", "species", "layer", "grazing"))
)

write.csv(crown_summary_all, 'crown_summary_all_combinations_with_grazing_082824.csv', row.names = FALSE)


















###PLOTS


###Species###
#cover
mean_bareground = weighted.mean(srer_bareground$cover)
mean_grass = weighted.mean(srer_grass$cover)
sd_bareground = sd(srer_bareground$cover)
sd_grass = sd(srer_grass$cover)

species = srer_cover_rbind %>%
  group_by(species) %>%
  summarize(mean=mean(cover),  
            sd=sd(cover),  
            count=n(),  
            se=sd/sqrt(count),  
            upper_limit=mean+se,  
            lower_limit=mean-se)%>%
  group_by(species) 

mean_wood = sum(species$mean)
#write.csv(all, 'grazing_layer_cover_082724.csv')






grass = srer_cover_rbind_bg %>%
  group_by(species,grazing) %>%
  summarize(mean=mean(cover),  
            sd=sd(cover),  
            count=n(),  
            se=sd/sqrt(count),  
            upper_limit=mean+sd,  
            lower_limit=mean-sd)

all = rbind(species,grass) 
# create a new dataframe crop_means_Se 
##write.csv(all, 'all_species_cover_082724.csv')

windows()
theme_set(theme_gray(base_size = 20, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
ggplot(srer_cover_rbind, aes(x=factor(species), y=cover, fill=species))+
  scale_fill_manual(values=c("gray", "brown",'lightblue','lightgreen','lightpink'))+
  geom_boxplot(alpha=0.5,
               size = 1)+
  theme( legend.position = "none" , axis.text.x = element_text(angle = 90))+
  ylab("mean % cover")+stat_summary(fun.y="mean",color="red", shape=4)+
  geom_line(aes(y = mean_wood, group = 1), size = 1, color = 'red') 









#density
species_density = srer_density %>%
  group_by(species) %>%
  summarize(mean=mean(n),  
            sd=sd(n),  
            count=n(),  
            se=sd/sqrt(count),  
            upper_limit=mean+sd,  
            lower_limit=mean-sd)

 

mean_density = sum(species_density$mean)
#write.csv(species_density, 'all_species_density_082724.csv')












# #write the summary to a CSV file
#write.csv(density_summary_all, 'density_summary_all_combinations_with_grazing_082824.csv', row.names = FALSE)

# Calculate the total mean density
mean_density <- sum(density_summary$mean)

# #write the summary to a CSV file



windows()
# Set theme with bold base elements
theme_set(theme_gray(base_size = 20, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))

# Create the plot with bold elements
ggplot(species_density, aes(x = species, y = mean, fill = species)) +
  scale_fill_manual(values = c("gray", "brown", 'lightblue', 'lightgreen', 'lightpink')) +  
  theme(
    legend.position = "none", 
    axis.text.x = element_text(angle = 90, face = "bold"), # Bold x-axis text
    axis.text.y = element_text(face = "bold"),             # Bold y-axis text
    axis.title = element_text(face = "bold")               # Bold axis titles
  ) +
  geom_point(shape = 21, size = 6) + 
  geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit), 
                width = 0.2, 
                position = position_dodge(0.01),
                size = 1.2) +                              # Thicker, bold error bars
  ylab("Mean Density per ha")



#crownarea
mean_crownarea = mean(srer_crownarea$crownArea)
sd_crownarea = sd(srer_crownarea$crownArea)


species_crownarea = srer_crownarea %>%
  group_by(species) %>%
  summarize(crownArea_mean=mean(crownArea),  
            sd=sd(crownArea),  
            count=n(),  
            se=sd/sqrt(count),  
            upper_limit=crownArea_mean+sd,  
            lower_limit=crownArea_mean-sd)%>%
  mutate(w_mean = crownArea_mean)%>%
  mutate(w_stdev = sd_crownarea)%>%
  mutate(g_mean = mean_grass)%>%
  mutate(g_stdev = sd_grass)
##write.csv(species_crownarea, 'all_species_crownarea_082724.csv')

# create a new dataframe crop_means_Se 
windows()
# Set theme with bold base elements
theme_set(theme_gray(base_size = 20, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
# Create the plot
ggplot(species_crownarea, aes(x = species, y = crownArea_mean, fill=species))+
  scale_fill_manual(values=c("gray", "brown",'lightblue','lightgreen','lightpink'))+
  geom_bar(position = "stack", stat = "identity", alpha=0.5) +
  geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit), 
                width = 0.2, 
                position = position_dodge(0.01),
                size = 1.2) +  
  geom_line(aes(y = mean_crownarea, group = 1), size = 1, color = 'red')+
  theme( legend.position = "none" , axis.text.x = element_text(angle = 90))+
  
  ylab("mean crown area m^2")













####summarizing elevation and soils####
#LAYER
#LAYER
woody_cover_summary <- srer_cover_rbind %>%
  group_by(species) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))%>%
  group_by(species)%>% summarise(across(cover_mean, ~ sum(., na.rm = TRUE)))
##write.csv(woody_cover_summary,"woody_cover_summary_082824.csv")

elev_cover_summary <- srer_cover_rbind %>%
  group_by(layer) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))%>%
  group_by(layer)%>% summarise(across(cover_mean, ~ sum(., na.rm = TRUE)))
##write.csv(elev_cover_summary,"elev_cover_summary_082824.csv")


soils_cover_summary <- srer_cover_rbind %>%
  group_by(MUSYM) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))%>%
  group_by(MUSYM)%>% summarise(across(cover_mean, ~ sum(., na.rm = TRUE)))
##write.csv(soils_cover_summary,"soils_cover_summary_082824.csv")

elev_woody_cover_summary <- srer_cover_rbind %>%
  group_by(layer,species) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))%>%
group_by(layer,species)%>% summarise(across(cover_mean, ~ sum(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(elev_woody_cover_summary,"elev_woody_cover_summary_082824.csv")


soils_elev_woody_cover_summary <- srer_cover_rbind %>%
  group_by(layer,species,MUSYM) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))%>%group_by(layer,MUSYM,species)%>% summarise(across(cover_mean, ~ sum(., na.rm = TRUE)))
##write.csv(soils_elev_woody_cover_summary,"soils_elev_woody_summary_082824.csv")






##density
woody_density_summary <- srer_density %>%
  group_by(species) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n))%>%group_by(species)%>% summarise(across(density_mean, ~ sum(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(woody_density_summary,"woody_density_summary_082824.csv")

elev_density_summary <- srer_density %>%
  group_by(layer) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n))%>%group_by(layer)%>% summarise(across(density_mean, ~ sum(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(elev_density_summary,"elev_density_summary_082824.csv")

soils_density_summary <- srer_density %>%
  group_by(MUSYM) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n))%>%group_by(MUSYM)%>% summarise(across(density_mean, ~ sum(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(soils_density_summary,"soils_density_summary_082824.csv")

elev_woody_density_summary <- srer_density %>%
  group_by(layer,species) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n))%>%group_by(layer,species)%>% summarise(across(density_mean, ~ sum(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(elev_woody_density_summary,"elev_woody_density_summary_082824.csv")

#SOILS
soils_elev_woody_density_summary <- srer_density%>%
  group_by(layer,species,MUSYM) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n))%>%group_by(layer,MUSYM,species)%>% summarise(across(density_mean, ~ sum(., na.rm = TRUE)))
##write.csv(soils_elev_woody_density_summary,"soils_elev_woody_density_summary_082824.csv")








##crownarea
woody_crownArea_summary <- srer_crownarea %>%
  group_by(species) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea))%>%group_by(species)%>% summarise(across(crownArea_mean, ~ mean(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(woody_crownArea_summary,"woody_crownArea_summary_082824.csv")

elev_crownArea_summary <- srer_crownarea %>%
  group_by(layer) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea))%>%group_by(layer)%>% summarise(across(crownArea_mean, ~ mean(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(elev_crownArea_summary,"elev_crownArea_summary_082824.csv")

soils_crownArea_summary <- srer_crownarea %>%
  group_by(MUSYM) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea))%>%group_by(MUSYM)%>% summarise(across(crownArea_mean, ~ mean(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(soils_crownArea_summary,"soils_crownArea_summary_082824.csv")


elev_woody_crownArea_summary <- srer_crownarea %>%
  group_by(layer,species) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea))%>%group_by(layer,species)%>% summarise(across(crownArea_mean, ~ mean(., na.rm = TRUE)))
#summarise(n = n())
##write.csv(elev_woody_crownArea_summary,"elev_woody_crownArea_summary_082824.csv")

soils_elev_woody_crownArea_summary <- srer_crownarea%>%
  group_by(layer,species,MUSYM) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea))%>%group_by(layer,MUSYM,species)%>% summarise(across(crownArea_mean, ~ mean(., na.rm = TRUE)))
##write.csv(soils_elev_woody_crownArea_summary,"soils_elev_woody_crownArea_summary_082824.csv")


























###############SUMMARIZING elevation,  soils, grazing#############
##Elevation, species and soils##
elev_woody_grazing_cover_p <- srer_cover_rbind %>%
  group_by(  layer) %>%
  summarise(grazing_avg = t.test(cover[grazing==0], cover[grazing==1])$p.value)
#summarise(n = n())

elev_woody_grazing_cover_mean <- srer_cover_rbind %>%
  group_by(  layer, grazing) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))
#summarise(n = n())
elev_woody_grazing_cover_summary = elev_woody_grazing_cover_mean%>%
  left_join(elev_woody_grazing_cover_p, by = c("layer"))

##write.csv(elev_woody_grazing_cover_summary,"elev_woody_grazing_cover_summary_082824.csv")
###write.csv(elev_woody_grazing_cover_p,"elev_woody_grazing_cover_p_082824.csv")






##Elevation, species and soils##
elev_woody_grazing_density_p <- srer_density  %>%
  group_by(layer) %>%
  summarise(grazing_avg = t.test(n[grazing==0], n[grazing==1])$p.value)

elev_woody_grazing_density_mean <- srer_density %>%
  group_by(  layer, grazing) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n)
  )
#summarise(n = n())
elev_woody_grazing_density_summary = elev_woody_grazing_density_mean%>% 
  left_join(elev_woody_grazing_density_p, by = c('layer'))

###write.csv(elev_woody_grazing_density_p,"elev_woody_grazing_density_p_090123.csv")
##write.csv(elev_woody_grazing_density_summary,"elev_woody_grazing_density_summary_082824.csv")




#srer_crownarea <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/elev_woody_grazing_crownarea_mean.csv')
##Elevation, species and soils##
elev_woody_grazing_crownarea_p <- srer_crownarea %>%
  group_by(layer) %>%
  summarise(grazing_avg = t.test(crownArea[grazing == 0], crownArea[grazing == 1])$p.value)


elev_woody_grazing_crownarea_mean <- srer_crownarea%>%
  group_by(  layer, grazing) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea)
  )

elev_woody_grazing_crownarea_summary = elev_woody_grazing_crownarea_mean%>% 
  left_join(elev_woody_grazing_crownarea_p, by = c( 'layer'))

##write.csv(elev_woody_grazing_crownarea_summary,"elev_woody_grazing_crownarea_summary_082824.csv")
###write.csv(elev_woody_grazing_crownarea_p,"elev_woody_grazing_crownarea_summary_082824.csv")











































































###############SUMMARIZING elevation,  soils, grazing#############
##Elevation, species and soils##
elev_woody_grazing_cover_p <- srer_cover_rbind %>%
  group_by(  layer) %>%
  summarise(grazing_avg = t.test(cover[grazing==0], cover[grazing==1])$p.value)
#summarise(n = n())

elev_woody_grazing_cover_mean <- srer_cover_rbind %>%
  group_by(  layer, grazing) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))
#summarise(n = n())
elev_woody_grazing_cover_summary = elev_woody_grazing_cover_mean%>%
  left_join(elev_woody_grazing_cover_p, by = c( 'layer'))

##write.csv(elev_woody_grazing_cover_summary,"elev_woody_grazing_cover_summary_082824.csv")
###write.csv(elev_woody_grazing_cover_p,"elev_woody_grazing_cover_p_082824.csv")






##Elevation, species and soils##
elev_woody_grazing_density_p <- srer_density  %>%
  group_by(layer,species) %>%
  summarise(grazing_avg = t.test(n[grazing==0], n[grazing==1])$p.value)

elev_woody_grazing_density_mean <- srer_density %>%
  group_by(  layer, grazing) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n)
  )
#summarise(n = n())
elev_woody_grazing_density_summary = elev_woody_grazing_density_mean%>% 
  left_join(elev_woody_grazing_density_p, by = c( 'layer'))

###write.csv(elev_woody_grazing_density_p,"elev_woody_grazing_density_p_090123.csv")
##write.csv(elev_woody_grazing_density_summary,"elev_woody_grazing_density_summary_082824.csv")




#srer_crownarea <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/elev_woody_grazing_crownarea_mean.csv')
##Elevation, species and soils##
elev_woody_grazing_crownarea_p <- srer_crownarea %>%
  group_by(layer,  species) %>%
  summarise(grazing_avg = t.test(crownArea[grazing == 0], crownArea[grazing == 1])$p.value)


elev_woody_grazing_crownarea_mean <- srer_crownarea%>%
  group_by(  layer, grazing) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea)
  )

elev_woody_grazing_crownarea_summary = elev_woody_grazing_crownarea_mean%>% 
  left_join(elev_woody_grazing_crownarea_p, by = c( 'layer'))

##write.csv(elev_woody_grazing_crownarea_summary,"elev_woody_grazing_crownarea_summary_082824.csv")
###write.csv(elev_woody_grazing_crownarea_p,"elev_woody_grazing_crownarea_summary_082824.csv")


























###############SUMMARIZING elevation, species, soils, grazing#############
##Elevation, species and soils##
species_elev_woody_grazing_cover_p <- srer_cover_rbind %>%
  group_by( species, layer) %>%
  summarise(grazing_avg = t.test(cover[grazing==0], cover[grazing==1])$p.value)
#summarise(n = n())

species_elev_woody_grazing_cover_mean <- srer_cover_rbind %>%
  group_by( species, layer, grazing) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))
#summarise(n = n())
species_elev_woody_grazing_cover_summary = species_elev_woody_grazing_cover_mean%>%
  left_join(species_elev_woody_grazing_cover_p, by = c('species', 'layer'))

##write.csv(species_elev_woody_grazing_cover_summary,"species_elev_woody_grazing_cover_summary_082824.csv")
###write.csv(species_elev_woody_grazing_cover_p,"species_elev_woody_grazing_cover_p_082824.csv")






##Elevation, species and soils##
species_elev_woody_grazing_density_p <- srer_density  %>%
  group_by(layer,species) %>%
  summarise(grazing_avg = t.test(n[grazing==0], n[grazing==1])$p.value)

species_elev_woody_grazing_density_mean <- srer_density %>%
  group_by( species, layer, grazing) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n)
  )
#summarise(n = n())
species_elev_woody_grazing_density_summary = species_elev_woody_grazing_density_mean%>% 
  left_join(species_elev_woody_grazing_density_p, by = c('species', 'layer'))

###write.csv(species_elev_woody_grazing_density_p,"species_elev_woody_grazing_density_p_090123.csv")
##write.csv(species_elev_woody_grazing_density_summary,"species_elev_woody_grazing_density_summary_082824.csv")




#srer_crownarea <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/species_elev_woody_grazing_crownarea_mean.csv')
##Elevation, species and soils##
species_elev_woody_grazing_crownarea_p <- srer_crownarea %>%
  group_by(layer,  species) %>%
  summarise(grazing_avg = t.test(crownArea[grazing == 0], crownArea[grazing == 1])$p.value)


species_elev_woody_grazing_crownarea_mean <- srer_crownarea%>%
  group_by( species, layer, grazing) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea)
  )

species_elev_woody_grazing_crownarea_summary = species_elev_woody_grazing_crownarea_mean%>% 
  left_join(species_elev_woody_grazing_crownarea_p, by = c('species', 'layer'))

##write.csv(species_elev_woody_grazing_crownarea_summary,"species_elev_woody_grazing_crownarea_summary_082824.csv")
###write.csv(species_elev_woody_grazing_crownarea_p,"species_elev_woody_grazing_crownarea_summary_082824.csv")







































###############SUMMARIZING elevation, species, soils, grazing#############
##Elevation, species and soils##
species_elev_woody_grazing_soil_cover_p <- srer_cover_rbind %>%
  group_by(MUSYM, species, layer) %>%
  summarise(grazing_avg = t.test(cover[grazing==0], cover[grazing==1])$p.value)
#summarise(n = n())

species_elev_woody_grazing_soil_cover_mean <- srer_cover_rbind %>%
  group_by(MUSYM, species, layer, grazing) %>%
  summarise(
    cover_mean = weighted.mean(cover),
    cover_count = n(),
    cover_sd = sd(cover))
#summarise(n = n())
species_elev_woody_grazing_soil_cover_summary = species_elev_woody_grazing_soil_cover_mean%>%
left_join(species_elev_woody_grazing_soil_cover_p, by = c('species', 'layer', 'MUSYM'))

##write.csv(species_elev_woody_grazing_soil_cover_summary,"species_elev_woody_grazing_soil_cover_summary_082824.csv")
###write.csv(species_elev_woody_grazing_soil_cover_p,"species_elev_woody_grazing_soil_cover_p_082824.csv")






##Elevation, species and soils##
species_elev_woody_grazing_soil_density_p <- srer_density  %>%
  group_by(layer,MUSYM,species) %>%
  summarise(grazing_avg = t.test(n[grazing==0], n[grazing==1])$p.value)

species_elev_woody_grazing_soil_density_mean <- srer_density %>%
  group_by(MUSYM, species, layer, grazing) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n)
  )
#summarise(n = n())
species_elev_woody_grazing_soil_density_summary = species_elev_woody_grazing_soil_density_mean%>% 
  left_join(species_elev_woody_grazing_soil_density_p, by = c('species', 'layer', 'MUSYM'))

###write.csv(species_elev_woody_grazing_soil_density_p,"species_elev_woody_grazing_soil_density_p_090123.csv")
##write.csv(species_elev_woody_grazing_soil_density_summary,"species_elev_woody_grazing_soil_density_summary_082824.csv")




#srer_crownarea <- read.csv('//gaea/projects/RaBET/RaBET_landuse/landuse/species_elev_woody_grazing_soil_crownarea_mean.csv')
##Elevation, species and soils##
species_elev_woody_grazing_soil_crownarea_p <- srer_crownarea %>%
  group_by(layer, MUSYM, species) %>%
  summarise(grazing_avg = t.test(crownArea[grazing == 0], crownArea[grazing == 1])$p.value)


species_elev_woody_grazing_soil_crownarea_mean <- srer_crownarea%>%
  group_by(MUSYM, species, layer, grazing) %>%
  summarise(
    crownArea_mean = weighted.mean(crownArea),
    crownArea_count = n(),
    crownArea_sd = sd(crownArea)
  )

species_elev_woody_grazing_soil_crownarea_summary = species_elev_woody_grazing_soil_crownarea_mean%>% 
  left_join(species_elev_woody_grazing_soil_crownarea_p, by = c('species', 'layer', 'MUSYM'))

##write.csv(species_elev_woody_grazing_soil_crownarea_summary,"species_elev_woody_grazing_soil_crownarea_summary_082824.csv")
###write.csv(species_elev_woody_grazing_soil_crownarea_p,"species_elev_woody_grazing_soil_crownarea_summary_082824.csv")
























#########SRER SUMMARIZING WITH SOILS PLOTS#########
cover_layer1 <- species_elev_woody_grazing_soil_cover_summary %>% 
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 0.8))%>% # Adjust 'significance' column as needed
  filter(layer==1)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "EbC")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))%>%
  mutate(upper_limit=cover_mean+cover_sd)%>%
  mutate(lower_limit = ifelse(cover_mean - cover_sd < 0, 0, cover_mean - cover_sd))

cover_layer2 <- species_elev_woody_grazing_soil_cover_summary %>%   
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 0.8))%>% # Adjust 'significance' column as needed
  filter(layer==2)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))%>%
  mutate(upper_limit=cover_mean+cover_sd)%>%
  mutate(lower_limit = ifelse(cover_mean - cover_sd < 0, 0, cover_mean - cover_sd))

cover_layer3 <- species_elev_woody_grazing_soil_cover_summary %>% 
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 0.8))%>% # Adjust 'significance' column as needed
  filter(layer==3)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "An" |MUSYM == "SoB")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))%>%
  mutate(upper_limit=cover_mean+cover_sd)%>%
  mutate(lower_limit = ifelse(cover_mean - cover_sd < 0, 0, cover_mean - cover_sd))

cover_layer4 <- species_elev_woody_grazing_soil_cover_summary %>% 
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 0.8))%>% # Adjust 'significance' column as needed
  filter(layer==4)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "CtB" |MUSYM == "CuC")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))%>%
  mutate(upper_limit=cover_mean+cover_sd)%>%
  mutate(lower_limit = ifelse(cover_mean - cover_sd < 0, 0, cover_mean - cover_sd))

density_layer1 <- species_elev_woody_grazing_soil_density_summary %>% 
  filter(layer==1)%>%
  mutate(across(everything(), ~ round(., 0))) %>% 
  filter(MUSYM == "EbC")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))

density_layer2 <- species_elev_woody_grazing_soil_density_summary %>% 
  filter(layer==2)%>%
  mutate(across(everything(), ~ round(., 0))) %>% 
  filter(MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))
density_layer3 <- species_elev_woody_grazing_soil_density_summary %>% 
  filter(layer==3)%>%
  mutate(across(everything(), ~ round(., 0))) %>% 
  filter(MUSYM == "An" |MUSYM == "SoB")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))
density_layer4 <- species_elev_woody_grazing_soil_density_summary %>% 
  filter(layer==4)%>%
  mutate(across(everything(), ~ round(., 0))) %>% 
  filter(MUSYM == "CtB" |MUSYM == "CuC")%>%  
  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))

crownarea_layer1 <- species_elev_woody_grazing_soil_crownarea_summary %>% 
  filter(layer==1)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "EbC")%>%  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))

crownarea_layer2 <- species_elev_woody_grazing_soil_crownarea_summary %>% 
  filter(layer==2)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB")%>%  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))
crownarea_layer3 <- species_elev_woody_grazing_soil_crownarea_summary %>% 
  filter(layer==3)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "An" |MUSYM == "SoB")%>%  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))
crownarea_layer4 <- species_elev_woody_grazing_soil_crownarea_summary %>% 
  filter(layer==4)%>%
  mutate(across(everything(), ~ round(., 2))) %>% 
  filter(MUSYM == "CtB" |MUSYM == "CuC")%>%  mutate(landuse = ifelse(grazing < 1, 'protected','grazing'))















###BARPLOTS COMPARING grazing cover
cover_layer1_plot<- ggplot(cover_layer1, aes(x = species, y = cover_mean, fill = grazing)) +
  geom_col(aes(alpha = alpha), position = "identity") + # Map alpha for transparency
  facet_grid(~ MUSYM) +
  labs(fill = "Layer 1")+  # Change the legend title
  theme(legend.position = "outside",
        axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
        axis.text.y=element_text(size=25),
        axis.title=element_text(size=30,face="bold"))+
  ylim(0,20)+ ylab("mean % cover")+geom_hline(aes(yintercept = 12.54), color = "blue", linetype = "dashed", size = 1)+ # Add a mean line+ # Add horizontal lines at specific y-intercepts # Add horizontal lines at specific y-intercepts
  geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit, linetype = as.factor(grazing)),  width = 0.4, position = position_dodge(width = 1),size=1)+
  scale_alpha_continuous(range = c(0.3, 1)) # Set alpha scale range

    
  
windows()
# Set theme with bold base elements
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(cover_layer1_plot)

cover_layer2_plot<- ggplot(cover_layer2, aes(x = species, y = cover_mean, fill = grazing)) +
  geom_col(aes(alpha = alpha), position = "identity") + # Map alpha for transparency
  facet_wrap(~ MUSYM)+
  labs(fill = "Layer 2")+  # Change the legend title
  theme(legend.position = "outside",
        axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
        axis.text.y=element_text(size=25),
        axis.title=element_text(size=30,face="bold"))+
  ylim(0,20)+  ylab("mean % cover")+
 geom_hline(aes(yintercept = 15.68), color = "red", linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts
 geom_hline(aes(yintercept = 13.80), color = "red", linetype = "dashed", size = 1)+  # Add horizontal lines at specific y-intercepts
 geom_hline(aes(yintercept = 13.52), color = "red", linetype = "dashed", size = 1) +  # Add horizontal lines at specific y-intercepts
 geom_hline(aes(yintercept = 14.22), color ='blue', linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts # Add horizontal lines at specific y-intercepts
 geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit, linetype = as.factor(grazing)),  width = 0.4, position = position_dodge(width = 1),size=1)+
scale_alpha_continuous(range = c(0.3, 0.8)) # Set alpha scale range

windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(cover_layer2_plot)

cover_layer3_plot<- ggplot(cover_layer3, aes(x = species, y = cover_mean, fill = grazing)) +
  geom_col(aes(alpha = alpha), position = "identity") + # Map alpha for transparency
  facet_wrap(~ MUSYM)+
  labs(fill = "Layer 3")+  # Change the legend title
  theme(legend.position = "outside",
        axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
        axis.text.y=element_text(size=25),
        axis.title=element_text(size=30,face="bold"))+
  ylim(0,20)+ylab("mean % cover")+
 geom_hline(aes(yintercept = 18.50), color = "red", linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts
 geom_hline(aes(yintercept = 16.35), color = "red", linetype = "dashed", size = 1)+
 geom_hline(aes(yintercept = 16.81), color = 'blue', linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts # Add horizontal lines at specific y-intercepts
  geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit, linetype = as.factor(grazing)),  width = 0.4, position = position_dodge(width = 1),size=1)+
  scale_alpha_continuous(range = c(0.3, 0.8)) # Set alpha scale range
windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(cover_layer3_plot)


cover_layer4_plot<- ggplot(cover_layer4, aes(x = species, y = cover_mean, fill = grazing)) +
  geom_col(aes(alpha = alpha), position = "identity") + # Map alpha for transparency
  facet_wrap(~ MUSYM)+
  labs(fill = "Layer 4")+  # Change the legend title
  theme(legend.position = "outside",
        axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
        axis.text.y=element_text(size=25),
        axis.title=element_text(size=30,face="bold"))+
  ylim(0,43)+ylab("mean % cover")+ # Center and bold the title
 geom_hline(aes(yintercept = 42.09), color = "red", linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts
 geom_hline(aes(yintercept = 34.98), color = "red", linetype = "dashed", size = 1)+
  geom_hline(aes(yintercept = 39.00), color = "blue", linetype = "dashed", size = 1) + # Add horizontal lines at specific y-intercepts # Add horizontal lines at specific y-intercepts
   geom_errorbar(aes(ymin = lower_limit, ymax = upper_limit, linetype = as.factor(grazing)),  width = 0.4, position = position_dodge(width = 1),size=1)+ scale_y_break(breaks=c(20, 35), scales=c(0.1, 0.1))+
  scale_alpha_continuous(range = c(0.3, 0.8)) # Set alpha scale range

windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(cover_layer4_plot)




library(gridExtra)

windows()
grid.arrange(cover_layer1_plot, cover_layer2_plot,cover_layer3_plot, nrow = 1)

















##density
density_layer1_plot<- ggplot(density_layer1, aes(x = species, y = density_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity")

density_layer2_plot<- ggplot(density_layer2, aes(x = species, y = density_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)

density_layer3_plot<- ggplot(density_layer3, aes(x = species, y = density_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)

density_layer4_plot<- ggplot(density_layer4, aes(x = species, y = density_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)
#windows()
#grid.arrange(density_layer1_plot, density_layer2_plot,density_layer3_plot,density_layer4_plot, nrow = 2)



##crownarea
crownarea_layer1_plot<- ggplot(crownarea_layer1, aes(x = species, y = crownArea_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity")

crownarea_layer2_plot<- ggplot(crownarea_layer2, aes(x = species, y = crownArea_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)

crownarea_layer3_plot<- ggplot(crownarea_layer3, aes(x = species, y = crownArea_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)

crownarea_layer4_plot<- ggplot(crownarea_layer4, aes(x = species, y = crownArea_mean, fill = grazing)) +
  geom_col(alpha = 0.4, position = "identity") +
  facet_wrap(~ MUSYM)


#windows()
#grid.arrange(crownarea_layer1_plot, crownarea_layer2_plot,crownarea_layer3_plot,crownarea_layer4_plot, nrow = 2)



####make density plots density

theme_set(theme_minimal())
density_layer1_density <- srer_density %>% 
  filter(layer==1)%>%
  mutate_if(is.numeric, round)%>%
  filter(MUSYM == "EbC")%>%  
  mutate(landuse = ifelse(grazing > 1, 'grazing','protected'))
density_layer2_density <- srer_density %>% 
  filter(layer==2)%>%
  mutate_if(is.numeric, round)%>%
  filter(MUSYM == "An" |MUSYM =="EbC"|MUSYM =="SoB")%>%  
  mutate(landuse = ifelse(grazing > 1, 'grazing','protected'))
density_layer3_density <- srer_density %>% 
  filter(layer==3)%>%
  mutate_if(is.numeric, round)%>%
  filter(MUSYM == "An" |MUSYM == "SoB")%>%  
  mutate(landuse = ifelse(grazing > 1, 'grazing','protected'))
density_layer4_density <- srer_density %>% 
  filter(layer==4)%>%
  mutate_if(is.numeric, round)%>%
  filter(MUSYM == "CtB" |MUSYM == "CuC")%>%  
  mutate(landuse = ifelse(grazing > 1, 'grazing','protected'))


# The diamonds dataset is natively available with R.

# Without transparency (left)
#ggplot(data=density_layer1_density, aes(x=n, group=species, fill=grazing)) +
#  facet_wrap(~MUSYM)+
#  geom_density(adjust=1.5) +
#  theme_ipsum()
#p10
density_elevation <- srer_density%>%
  group_by(MUSYM, layer,species) %>%
  summarise(
    density_mean = weighted.mean(n),
    density_count = n(),
    density_sd = sd(n)
  )


# With transparency (right)
p2 <- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) +
  geom_density(adjust=1.5, alpha=.4) +
  theme_ipsum()

density_layer1_density$species <- as.factor(density_layer1_density$species)
density_layer1_density$grazing <- as.factor(density_layer1_density$grazing)
density_layer2_density$species <- as.factor(density_layer2_density$species)
density_layer2_density$grazing <- as.factor(density_layer2_density$grazing)
density_layer3_density$species <- as.factor(density_layer3_density$species)
density_layer3_density$grazing <- as.factor(density_layer3_density$grazing)
density_layer4_density$species <- as.factor(density_layer4_density$species)
density_layer4_density$grazing <- as.factor(density_layer4_density$grazing)


density_layer1_density_plot<-ggplot(data = density_layer1_density, aes(x = n, y = species, fill = grazing)) + facet_wrap(~MUSYM)+
  ggridges::geom_density_ridges(quantile_lines=TRUE, quantile_fun=function(n,...)mean(n),scale = 1) + xlim(0, 300)+
  scale_x_continuous(
    limits = c(0, 10),  # Adjust the range as needed
    breaks = seq(0, 10, by = 1),  # Specify the tick positions
    labels = seq(0, 10, by = 1)  # Specify the tick labels
  )+scale_fill_manual(values = alpha(c("red", "blue", "green"), alpha = 0.5))+ ggtitle("layer 1 cover")


density_layer2_density_plot<-ggplot(data = density_layer2_density, aes(x = n, y = species, fill = grazing)) + facet_wrap(~MUSYM)+
  ggridges::geom_density_ridges(quantile_lines=TRUE, quantile_fun=function(n,...)mean(n),scale = 1) + 
  scale_x_continuous(
    limits = c(0, 10),  # Adjust the range as needed
    breaks = seq(0, 10, by = 1),  # Specify the tick positions
    labels = seq(0, 10, by = 1)  # Specify the tick labels
  )+scale_fill_manual(values = alpha(c("red", "blue", "green"), alpha = 0.5))+ ggtitle("layer 2 cover")


density_layer3_density_plot<-ggplot(data = density_layer3_density, aes(x = n, y = species, fill = grazing)) + facet_wrap(~MUSYM)+
  ggridges::geom_density_ridges(quantile_lines=TRUE, quantile_fun=function(n,...)mean(n),scale = 1) + 
  scale_x_continuous(
    limits = c(0, 15),  # Adjust the range as needed
    breaks = seq(0, 15, by = 1),  # Specify the tick positions
    labels = seq(0, 15, by = 1)  # Specify the tick labels
  )+scale_fill_manual(values = alpha(c("red", "blue", "green"), alpha = 0.5))+ ggtitle("layer 3 cover")


density_layer4_density_plot <- ggplot(data = density_layer4_density, aes(x = n, y = species, fill = grazing)) + 
  facet_wrap(~MUSYM) +
  ggridges::geom_density_ridges(quantile_lines = TRUE, quantile_fun = function(n, ...) mean(n), scale = 1) +
  scale_x_continuous(
    limits = c(0, 20),  # Adjust the x-axis range as needed
    breaks = seq(0, 20, by = 1),  # Specify the x-axis tick positions
    labels = seq(0, 20, by = 1)  # Specify the x-axis tick labels
  ) +scale_fill_manual(values = alpha(c("red", "blue", "green"), alpha = 0.5))+ ggtitle("layer 4 cover")


# Display the bubble plot
#windows()
#grid.arrange(density_layer1_density_plot, density_layer2_density_plot,density_layer3_density_plot,density_layer4_density_plot, nrow = 2)

species_elev_woody_grazing_soil_density_summary_layer1 = species_elev_woody_grazing_soil_density_summary%>% filter(layer==1)
species_elev_woody_grazing_soil_density_summary_layer2 = species_elev_woody_grazing_soil_density_summary%>% filter(layer==2)
species_elev_woody_grazing_soil_density_summary_layer3 = species_elev_woody_grazing_soil_density_summary%>% filter(layer==3)
species_elev_woody_grazing_soil_density_summary_layer4 = species_elev_woody_grazing_soil_density_summary%>% filter(layer==4)
  
species_elev_woody_grazing_soil_density_summary_layer1_plot =
  species_elev_woody_grazing_soil_density_summary_layer1%>%
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 1))%>%
  ggplot(aes(x = species, y = density_mean)) +
  geom_line(aes(group = species)) +
  geom_point(aes(color = grazing, size = density_mean, alpha = alpha)) + # Use alpha for transparency
  facet_grid(cols = vars(MUSYM), scales = "free") + 
  scale_size(range = c(1, 15)) + # Adjust the range of points size
  scale_alpha_continuous(range = c(0.3, 1)) + # Adjust transparency scale
  theme(
    legend.position = "outside",
    axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
    axis.text.y = element_text(size = 25),
    axis.title.x = element_text(size = 25),
    axis.title.y = element_text(size = 25)
  ) +
  ylim(0, 500)

windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(species_elev_woody_grazing_soil_density_summary_layer1_plot)

species_elev_woody_grazing_soil_density_summary_layer2_plot =
  species_elev_woody_grazing_soil_density_summary_layer2%>%
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 1))%>%
  ggplot(aes(x = species, y = density_mean)) +
  geom_line(aes(group = species)) +
  geom_point(aes(color = grazing, size = density_mean, alpha = alpha)) + # Use alpha for transparency
  facet_grid(cols = vars(MUSYM), scales = "free") + 
  scale_size(range = c(1, 15)) + # Adjust the range of points size
  scale_alpha_continuous(range = c(0.3, 1)) + # Adjust transparency scale
  theme(
    legend.position = "outside",
    axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
    axis.text.y = element_text(size = 25),
    axis.title.x = element_text(size = 25),
    axis.title.y = element_text(size = 25)
  ) +
  ylim(0, 500)
windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(species_elev_woody_grazing_soil_density_summary_layer2_plot)

species_elev_woody_grazing_soil_density_summary_layer3_plot =
  species_elev_woody_grazing_soil_density_summary_layer3%>%
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 1))%>%
  ggplot(aes(x = species, y = density_mean)) +
  geom_line(aes(group = species)) +
  geom_point(aes(color = grazing, size = density_mean, alpha = alpha)) + # Use alpha for transparency
  facet_grid(cols = vars(MUSYM), scales = "free") + 
  scale_size(range = c(1, 15)) + # Adjust the range of points size
  scale_alpha_continuous(range = c(0.3, 1)) + # Adjust transparency scale
  theme(
    legend.position = "outside",
    axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
    axis.text.y = element_text(size = 25),
    axis.title.x = element_text(size = 25),
    axis.title.y = element_text(size = 25)
  ) +
  ylim(0, 500)

windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(species_elev_woody_grazing_soil_density_summary_layer3_plot)

species_elev_woody_grazing_soil_density_summary_layer4_plot =
  species_elev_woody_grazing_soil_density_summary_layer4%>% 
  mutate(alpha = ifelse(grazing_avg > 0.1, 0.3, 1))%>%
  ggplot(aes(x = species, y = density_mean)) +
  geom_line(aes(group = species)) +
  geom_point(aes(color = grazing, size = density_mean, alpha = alpha)) + # Use alpha for transparency
  facet_grid(cols = vars(MUSYM), scales = "free") + 
  scale_size(range = c(1, 15)) + # Adjust the range of points size
  scale_alpha_continuous(range = c(0.3, 1)) + # Adjust transparency scale
  theme(
    legend.position = "outside",
    axis.text.x = element_text(angle = 90, face = "bold", size = 25),  # Correctly set text appearance
    axis.text.y = element_text(size = 25),
    axis.title.x = element_text(size = 25),
    axis.title.y = element_text(size = 25)
  ) +
  ylim(0, 800)

windows()
theme_set(theme_gray(base_size = 30, base_family = "") + 
            theme(
              axis.title = element_text(face = "bold"),      # Bold axis titles
              axis.text = element_text(face = "bold"),       # Bold axis text
              legend.text = element_text(face = "bold"),     # Bold legend text
              legend.title = element_text(face = "bold"),    # Bold legend title
              strip.text = element_text(face = "bold")       # Bold facet labels
            ))
print(species_elev_woody_grazing_soil_density_summary_layer4_plot)



  # Display the bubble plot
windows()
gridExtra::grid.arrange(species_elev_woody_grazing_soil_density_summary_layer1_plot, 
             species_elev_woody_grazing_soil_density_summary_layer2_plot,
             species_elev_woody_grazing_soil_density_summary_layer3_plot,
             species_elev_woody_grazing_soil_density_summary_layer4_plot,
             nrow = 1)

































































